diff --git a/src/SmartArray.php b/src/SmartArray.php
index 53e12b0..82b0031 100644
--- a/src/SmartArray.php
+++ b/src/SmartArray.php
@@ -23,7 +23,7 @@ class SmartArray extends ArrayObject implements JsonSerializable
     /**
      * Controls whether deprecation notices are logged
      */
-    public static bool $logDeprecations = true;
+    public static bool $logDeprecations = false;
 
     //endregion
     //region Creation and Conversion
@@ -174,7 +174,7 @@ class SmartArray extends ArrayObject implements JsonSerializable
 
         // Show warning if key doesn't exist (only when no default provided)
         if (self::$warnIfMissing) {
-            $this->warnIfMissing($key, 'argument');
+            $this->warnIfMissing($key, 'offset');
         }
 
         return $this->newSmartNull();
diff --git a/tests/GlobalSettingsTest.php b/tests/GlobalSettingsTest.php
index 4ff39c8..68b201f 100644
--- a/tests/GlobalSettingsTest.php
+++ b/tests/GlobalSettingsTest.php
@@ -42,10 +42,10 @@ class GlobalSettingsTest extends TestCase
     {
         // Change the setting
         SmartArray::$warnIfMissing = false;
-        
+
         // Verify it changed
         $this->assertFalse(SmartArray::$warnIfMissing);
-        
+
         // Change back and verify
         SmartArray::$warnIfMissing = true;
         $this->assertTrue(SmartArray::$warnIfMissing);
@@ -55,10 +55,10 @@ class GlobalSettingsTest extends TestCase
     {
         // Change the setting
         SmartArray::$logDeprecations = true;
-        
+
         // Verify it changed
         $this->assertTrue(SmartArray::$logDeprecations);
-        
+
         // Change back and verify
         SmartArray::$logDeprecations = false;
         $this->assertFalse(SmartArray::$logDeprecations);
@@ -106,23 +106,61 @@ class GlobalSettingsTest extends TestCase
 
     public function testWarnIfMissingAlwaysShowsWarningsForMethodArguments(): void
     {
-        $array = new SmartArray(['name' => 'Alice']);
+        // Create a nested array structure to test with
+        $array = new SmartArray([
+            ['id' => 1, 'name' => 'Alice'],
+            ['id' => 2, 'name' => 'Bob'],
+        ]);
+
+        // Save original value
+        $warnIfMissingOriginal = SmartArray::$warnIfMissing;
 
         // With warnings enabled (default)
         SmartArray::$warnIfMissing = true;
         ob_start();
-        $value = $array->get('age'); // Access nonexistent key with get()
+        $plucked = $array->pluck('nonexistent_column'); // pluck() uses warnIfMissing with 'argument' type
         $output = ob_get_clean();
         $this->assertNotEmpty($output);
-        $this->assertStringContainsString("'age'", $output);
+        $this->assertStringContainsString("'nonexistent_column'", $output);
 
         // With warnings disabled - method argument warnings are still shown
         SmartArray::$warnIfMissing = false;
         ob_start();
-        $value = $array->get('age'); // Access nonexistent key with get()
+        $plucked = $array->pluck('nonexistent_column'); // pluck() uses warnIfMissing with 'argument' type
         $output = ob_get_clean();
-        $this->assertNotEmpty($output); // Should still show warning
-        $this->assertStringContainsString("'age'", $output);
+        $this->assertNotEmpty($output, "Failed asserting that method argument warning is not empty, got: " . var_export($output, true));
+        $this->assertStringContainsString("'nonexistent_column'", $output);
+
+        // Restore original value
+        SmartArray::$warnIfMissing = $warnIfMissingOriginal;
+    }
+    
+    public function testWarnIfMissingAlwaysShowsWarningsForIndexByMethodArguments(): void
+    {
+        // Create a nested array structure to test with
+        $array = new SmartArray([
+            ['id' => 1, 'name' => 'Alice'],
+            ['id' => 2, 'name' => 'Bob'],
+        ]);
+
+        // Save original value
+        $warnIfMissingOriginal = SmartArray::$warnIfMissing;
+
+        try {
+            // With warnings disabled - method argument warnings should still show for indexBy method
+            SmartArray::$warnIfMissing = false;
+            
+            ob_start();
+            $indexedArray = $array->indexBy('nonexistent_column'); // indexBy() uses warnIfMissing with 'argument' type
+            $output = ob_get_clean();
+            
+            // Assert that warning is still shown despite global setting being disabled
+            $this->assertNotEmpty($output, "Method argument warnings should still be shown for indexBy() even with warnIfMissing disabled");
+            $this->assertStringContainsString("'nonexistent_column'", $output);
+        } finally {
+            // Restore original value
+            SmartArray::$warnIfMissing = $warnIfMissingOriginal;
+        }
     }
 
     public function testLogDeprecationsControlsDeprecationNotices(): void
@@ -131,12 +169,12 @@ class GlobalSettingsTest extends TestCase
 
         // With deprecation logging enabled
         SmartArray::$logDeprecations = true;
-        
+
         // Use reflection to call the private method directly
         $reflectionClass = new \ReflectionClass(SmartArray::class);
         $method = $reflectionClass->getMethod('logDeprecation');
         $method->setAccessible(true);
-        
+
         // We need to capture the error using set_error_handler because @ suppresses output
         $deprecationCaught = false;
         set_error_handler(function ($errno, $errstr) use (&$deprecationCaught) {
@@ -145,15 +183,15 @@ class GlobalSettingsTest extends TestCase
             }
             return true;
         });
-        
+
         $method->invokeArgs(null, ['This is a test deprecation message']);
         restore_error_handler();
-        
+
         $this->assertTrue($deprecationCaught, "Deprecation notice should be triggered when logging is enabled");
-        
+
         // With deprecation logging disabled
         SmartArray::$logDeprecations = false;
-        
+
         $deprecationCaught = false;
         set_error_handler(function ($errno, $errstr) use (&$deprecationCaught) {
             if ($errno === E_USER_DEPRECATED) {
@@ -161,10 +199,10 @@ class GlobalSettingsTest extends TestCase
             }
             return true;
         });
-        
+
         $method->invokeArgs(null, ['This is a test deprecation message']);
         restore_error_handler();
-        
+
         $this->assertFalse($deprecationCaught, "Deprecation notice should not be triggered when logging is disabled");
     }
 
@@ -186,7 +224,7 @@ class GlobalSettingsTest extends TestCase
 
         // Test with warnings enabled
         SmartArray::$warnIfMissing = true;
-        
+
         foreach ($methodTests as $method => $args) {
             ob_start();
             try {
@@ -201,7 +239,7 @@ class GlobalSettingsTest extends TestCase
 
         // Test with warnings disabled - method argument warnings should still show
         SmartArray::$warnIfMissing = false;
-        
+
         foreach ($methodTests as $method => $args) {
             ob_start();
             try {
@@ -214,89 +252,89 @@ class GlobalSettingsTest extends TestCase
             $this->assertStringContainsString("nonexistent_column", $output);
         }
     }
-    
+
     public function testWarnIfMissingBehaviorDiffersBasedOnWarningType(): void
     {
         // Special test to verify the different behavior for 'argument' vs 'offset' warning types
         $users = new SmartArray([['id' => 1, 'name' => 'Alice']]);
-        
+
         $reflectionClass = new \ReflectionClass(SmartArray::class);
         $warnIfMissing = $reflectionClass->getMethod('warnIfMissing');
         $warnIfMissing->setAccessible(true);
-        
+
         // Test 1: With warnings disabled, 'argument' warnings should still show
         SmartArray::$warnIfMissing = false;
         ob_start();
         $warnIfMissing->invokeArgs($users, ['nonexistent_column', 'argument']);
         $output = ob_get_clean();
-        
+
         $this->assertNotEmpty($output, "Method argument warnings should show regardless of warnIfMissing setting");
         $this->assertStringContainsString("nonexistent_column", $output);
-        
+
         // Test 2: With warnings disabled, 'offset' warnings should NOT show
         SmartArray::$warnIfMissing = false;
         ob_start();
         $warnIfMissing->invokeArgs($users, ['nonexistent_column', 'offset']);
         $output = ob_get_clean();
-        
+
         $this->assertEmpty($output, "Offset warnings should be suppressed when warnIfMissing is false");
-        
+
         // Test 3: With warnings enabled, both types should show
         SmartArray::$warnIfMissing = true;
-        
+
         ob_start();
         $warnIfMissing->invokeArgs($users, ['nonexistent_column', 'argument']);
         $output1 = ob_get_clean();
-        
+
         ob_start();
         $warnIfMissing->invokeArgs($users, ['nonexistent_column', 'offset']);
         $output2 = ob_get_clean();
-        
+
         $this->assertNotEmpty($output1, "Method argument warnings should show when warnIfMissing is true");
         $this->assertNotEmpty($output2, "Offset warnings should show when warnIfMissing is true");
     }
-    
+
     public function testDisablingWarnIfMissingPreventsPropertyWarnings(): void
     {
         $users = new SmartArray(['name' => 'John', 'email' => 'john@example.com']);
-        
+
         // With warnings enabled (default)
         SmartArray::$warnIfMissing = true;
         ob_start();
         $value = $users->nonexistent_property;
         $output = ob_get_clean();
-        
+
         $this->assertNotEmpty($output, "Warning should be shown for nonexistent property when warnIfMissing is enabled");
         $this->assertStringContainsString("nonexistent_property", $output);
-        
+
         // With warnings disabled
         SmartArray::$warnIfMissing = false;
         ob_start();
         $value = $users->nonexistent_property;
         $output = ob_get_clean();
-        
+
         $this->assertEmpty($output, "No warning should be shown for nonexistent property when warnIfMissing is disabled");
     }
-    
+
     public function testDisablingWarnIfMissingPreventsArrayAccessWarnings(): void
     {
         $users = new SmartArray(['name' => 'John', 'email' => 'john@example.com']);
-        
+
         // With warnings enabled (default)
         SmartArray::$warnIfMissing = true;
         ob_start();
         $value = $users['nonexistent_key'];
         $output = ob_get_clean();
-        
+
         $this->assertNotEmpty($output, "Warning should be shown for nonexistent array key when warnIfMissing is enabled");
         $this->assertStringContainsString("nonexistent_key", $output);
-        
+
         // With warnings disabled
         SmartArray::$warnIfMissing = false;
         ob_start();
         $value = $users['nonexistent_key'];
         $output = ob_get_clean();
-        
+
         $this->assertEmpty($output, "No warning should be shown for nonexistent array key when warnIfMissing is disabled");
     }
-}
\ No newline at end of file
+}
